"use strict"; function _typeof(t) { return _typeof = "function" == typeof Symbol && "symbol" == typeof Symbol.iterator ? function (t) { return typeof t } : function (t) { return t && "function" == typeof Symbol && t.constructor === Symbol && t !== Symbol.prototype ? "symbol" : typeof t }, _typeof(t) } function _classCallCheck(t, e) { if (!(t instanceof e)) throw new TypeError("Cannot call a class as a function") } function _defineProperties(t, e) { for (var r = 0; r < e.length; r++) { var n = e[r]; n.enumerable = n.enumerable || !1, n.configurable = !0, "value" in n && (n.writable = !0), Object.defineProperty(t, _toPropertyKey(n.key), n) } } function _createClass(t, e, r) { return e && _defineProperties(t.prototype, e), r && _defineProperties(t, r), Object.defineProperty(t, "prototype", { writable: !1 }), t } function _toPropertyKey(t) { var e = _toPrimitive(t, "string"); return "symbol" === _typeof(e) ? e : String(e) } function _toPrimitive(t, e) { if ("object" !== _typeof(t) || null === t) return t; var r = t[Symbol.toPrimitive]; if (void 0 !== r) { var n = r.call(t, e || "default"); if ("object" !== _typeof(n)) return n; throw new TypeError("@@toPrimitive must return a primitive value.") } return ("string" === e ? String : Number)(t) } function _inherits(t, e) { if ("function" != typeof e && null !== e) throw new TypeError("Super expression must either be null or a function"); t.prototype = Object.create(e && e.prototype, { constructor: { value: t, writable: !0, configurable: !0 } }), Object.defineProperty(t, "prototype", { writable: !1 }), e && _setPrototypeOf(t, e) } function _createSuper(t) { var e = _isNativeReflectConstruct(); return function () { var r, n = _getPrototypeOf(t); if (e) { var o = _getPrototypeOf(this).constructor; r = Reflect.construct(n, arguments, o) } else r = n.apply(this, arguments); return _possibleConstructorReturn(this, r) } } function _possibleConstructorReturn(t, e) { if (e && ("object" === _typeof(e) || "function" == typeof e)) return e; if (void 0 !== e) throw new TypeError("Derived constructors may only return object or undefined"); return _assertThisInitialized(t) } function _assertThisInitialized(t) { if (void 0 === t) throw new ReferenceError("this hasn't been initialised - super() hasn't been called"); return t } function _wrapNativeSuper(t) { var e = "function" == typeof Map ? new Map : void 0; return _wrapNativeSuper = function (t) { if (null === t || !_isNativeFunction(t)) return t; if ("function" != typeof t) throw new TypeError("Super expression must either be null or a function"); if (void 0 !== e) { if (e.has(t)) return e.get(t); e.set(t, r) } function r() { return _construct(t, arguments, _getPrototypeOf(this).constructor) } return r.prototype = Object.create(t.prototype, { constructor: { value: r, enumerable: !1, writable: !0, configurable: !0 } }), _setPrototypeOf(r, t) }, _wrapNativeSuper(t) } function _construct(t, e, r) { return _construct = _isNativeReflectConstruct() ? Reflect.construct.bind() : function (t, e, r) { var n = [null]; n.push.apply(n, e); var o = new (Function.bind.apply(t, n)); return r && _setPrototypeOf(o, r.prototype), o }, _construct.apply(null, arguments) } function _isNativeReflectConstruct() { if ("undefined" == typeof Reflect || !Reflect.construct) return !1; if (Reflect.construct.sham) return !1; if ("function" == typeof Proxy) return !0; try { return Boolean.prototype.valueOf.call(Reflect.construct(Boolean, [], (function () { }))), !0 } catch (t) { return !1 } } function _isNativeFunction(t) { return -1 !== Function.toString.call(t).indexOf("[native code]") } function _setPrototypeOf(t, e) { return _setPrototypeOf = Object.setPrototypeOf ? Object.setPrototypeOf.bind() : function (t, e) { return t.__proto__ = e, t }, _setPrototypeOf(t, e) } function _getPrototypeOf(t) { return _getPrototypeOf = Object.setPrototypeOf ? Object.getPrototypeOf.bind() : function (t) { return t.__proto__ || Object.getPrototypeOf(t) }, _getPrototypeOf(t) } var SearchForm = function (t) { _inherits(r, _wrapNativeSuper(HTMLElement)); var e = _createSuper(r); function r() { var t; return _classCallCheck(this, r), (t = e.call(this)).input = t.querySelector('input[type="search"]'), t.resetButton = t.querySelector('button[type="reset"]'), t.input && (t.input.form.addEventListener("reset", t.onFormReset.bind(_assertThisInitialized(t))), t.input.addEventListener("input", debounce((function (e) { t.onChange(e) }), 300).bind(_assertThisInitialized(t)))), t } return _createClass(r, [{ key: "toggleResetButton", value: function () { var t = this.resetButton.classList.contains("hidden"); this.input.value.length > 0 && t ? this.resetButton.classList.remove("hidden") : 0 !== this.input.value.length || t || this.resetButton.classList.add("hidden") } }, { key: "onChange", value: function () { this.toggleResetButton() } }, { key: "shouldResetForm", value: function () { return !document.querySelector('[aria-selected="true"] a') } }, { key: "onFormReset", value: function (t) { t.preventDefault(), this.shouldResetForm() && (this.input.value = "", this.input.focus(), this.toggleResetButton()) } }]), r }(); customElements.define("search-form", SearchForm);
